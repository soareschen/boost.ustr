<?xml version="1.0" standalone="yes"?>
<library-reference id="reference"><title>Reference</title><header name="boost/ustr/encoding_traits.hpp"><namespace name="boost"><namespace name="ustr"><class name="encoding_engine"><template>
      <template-nontype-parameter name="codeunit_size"><type>size_t</type></template-nontype-parameter>
      <template-type-parameter name="Policy"/>
    </template></class><class-specialization name="encoding_engine"><template>
      <template-type-parameter name="Policy"/>
    </template><specialization><template-arg>1</template-arg><template-arg>Policy</template-arg></specialization><typedef name="type"><type>utf8_encoder&lt; Policy &gt;</type></typedef></class-specialization><class-specialization name="encoding_engine"><template>
      <template-type-parameter name="Policy"/>
    </template><specialization><template-arg>2</template-arg><template-arg>Policy</template-arg></specialization><typedef name="type"><type>utf16_encoder&lt; Policy &gt;</type></typedef></class-specialization><class name="utf_encoding_traits"><template>
      <template-type-parameter name="StringTraits"/>
      <template-type-parameter name="Policy"><default>replace_policy&lt;'?'&gt;</default></template-type-parameter>
    </template><class name="codepoint_iterator"><typedef name="reference"><type>codepoint_type</type></typedef><typedef name="const_reference"><type>const codepoint_type</type></typedef><method-group name="public member functions"><method name="operator*" cv="const"><type>const codepoint_type</type></method><method name="operator++" cv="const"><type>const <classname>codepoint_iterator</classname> &amp;</type></method><method name="operator++" cv=""><type><classname>codepoint_iterator</classname> &amp;</type></method><method name="operator++" cv="const"><type><classname>codepoint_iterator</classname></type><parameter name=""><paramtype>int</paramtype></parameter></method><method name="operator--" cv=""><type><classname>codepoint_iterator</classname> &amp;</type></method><method name="operator--" cv="const"><type>const <classname>codepoint_iterator</classname> &amp;</type></method><method name="operator--" cv="const"><type><classname>codepoint_iterator</classname></type><parameter name=""><paramtype>int</paramtype></parameter></method><method name="increment" cv="const"><type>void</type></method><method name="decrement" cv="const"><type>void</type></method><method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>codepoint_iterator</classname> &amp;</paramtype></parameter></method><method name="operator!=" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>codepoint_iterator</classname> &amp;</paramtype></parameter></method></method-group><constructor><parameter name="codeunit_it"><paramtype>codeunit_iterator_type</paramtype></parameter><parameter name="begin"><paramtype>codeunit_iterator_type</paramtype></parameter><parameter name="end"><paramtype>codeunit_iterator_type</paramtype></parameter></constructor><constructor><parameter name="other"><paramtype>const <classname>codepoint_iterator</classname> &amp;</paramtype></parameter></constructor><copy-assignment><parameter name="other"><paramtype>const <classname>codepoint_iterator</classname> &amp;</paramtype></parameter></copy-assignment></class><typedef name="string_traits"><type>StringTraits</type></typedef><typedef name="codeunit_type"><type>string_traits::codeunit_type</type></typedef><typedef name="codeunit_iterator_type"><type>string_traits::codeunit_iterator_type</type></typedef><typedef name="raw_strptr_type"><type>string_traits::raw_strptr_type</type></typedef><typedef name="const_strptr_type"><type>string_traits::const_strptr_type</type></typedef><typedef name="mutable_strptr_type"><type>string_traits::mutable_strptr_type</type></typedef><typedef name="encoder"><type><classname>encoding_engine</classname>&lt; string_traits::codeunit_size, Policy &gt;::type</type></typedef><typedef name="codepoint_iterator_type"><type><classname>codepoint_iterator</classname></type></typedef><method-group name="public static functions"><method name="estimate_codeunit_length" cv=""><type>static size_t</type><parameter name="codepoint_length"><paramtype>size_t</paramtype></parameter></method><method name="append_codepoint" cv=""><type>static void</type><parameter name="str"><paramtype>mutable_strptr_type &amp;</paramtype></parameter><parameter name="codepoint"><paramtype>const codepoint_type &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></header><header name="boost/ustr/policy.hpp"><namespace name="boost"><namespace name="ustr"><class name="replace_policy"><template>
      <template-nontype-parameter name="replacement"><type>codepoint_type</type><default>'?'</default></template-nontype-parameter>
    </template><method-group name="public static functions"><method name="replace_invalid_codepoint" cv=""><type>static codepoint_type</type></method><method name="replace_invalid_codepoint" cv=""><type>static codepoint_type</type><parameter name="original"><paramtype>codepoint_type</paramtype></parameter></method></method-group></class><class name="encoding_error"/><class name="error_policy"><method-group name="public static functions"><method name="replace_invalid_codepoint" cv=""><type>static codepoint_type</type></method><method name="replace_invalid_codepoint" cv=""><type>static codepoint_type</type><parameter name="original"><paramtype>codepoint_type</paramtype></parameter></method></method-group></class></namespace></namespace></header><header name="boost/ustr/string_traits.hpp"><namespace name="boost"><namespace name="ustr"><class name="char_type"><template>
      <template-type-parameter name="StringT"/>
    </template><typedef name="type"><type>StringT::value_type</type></typedef></class><class-specialization name="char_type"><template>
      <template-type-parameter name="CharT"/>
      <template-type-parameter name="CharTraits"/>
      <template-type-parameter name="Alloc"/>
    </template><specialization><template-arg>std::basic_string&lt; CharT</template-arg><template-arg>CharTraits</template-arg><template-arg>Alloc &gt;</template-arg></specialization><typedef name="type"><type>CharT</type></typedef></class-specialization><class-specialization name="char_type"><template>
      <template-type-parameter name="CharT"/>
      <template-type-parameter name="Alloc"/>
    </template><specialization><template-arg>std::vector&lt; CharT</template-arg><template-arg>Alloc &gt;</template-arg></specialization><typedef name="type"><type>CharT</type></typedef></class-specialization><class-specialization name="char_type"><template>
      <template-type-parameter name="CharT"/>
      <template-type-parameter name="Alloc"/>
    </template><specialization><template-arg>std::list&lt; CharT</template-arg><template-arg>Alloc &gt;</template-arg></specialization><typedef name="type"><type>CharT</type></typedef></class-specialization><class name="string_traits"><template>
      <template-type-parameter name="StringT"/>
      <template-type-parameter name="CharT"><default>typename char_type&lt;StringT&gt;::type</default></template-type-parameter>
    </template><struct name="const_strptr"><method-group name="public static functions"><method name="get" cv=""><type>static const_raw_strptr_type</type><parameter name="str"><paramtype>const const_strptr_type &amp;</paramtype></parameter></method><method name="codeunit_begin" cv=""><type>static codeunit_iterator_type</type><parameter name="str"><paramtype>const const_strptr_type &amp;</paramtype></parameter></method><method name="codeunit_end" cv=""><type>static codeunit_iterator_type</type><parameter name="str"><paramtype>const const_strptr_type &amp;</paramtype></parameter></method><method name="equals" cv=""><type>static bool</type><parameter name="str1"><paramtype>const_strptr_type</paramtype></parameter><parameter name="str2"><paramtype>const_strptr_type</paramtype></parameter></method></method-group></struct><struct name="mutable_strptr"><method-group name="public static functions"><method name="release" cv=""><type>static raw_strptr_type</type><parameter name="str"><paramtype>mutable_strptr_type &amp;</paramtype></parameter></method><method name="release" cv=""><type>static raw_strptr_type</type><parameter name="str"><paramtype>mutable_strptr_type &amp;&amp;</paramtype></parameter></method><method name="get" cv=""><type>static raw_strptr_type</type><parameter name="str"><paramtype>mutable_strptr_type &amp;</paramtype></parameter></method><method name="append" cv=""><type>static void</type><parameter name="str"><paramtype>mutable_strptr_type &amp;</paramtype></parameter><parameter name="codeunit"><paramtype>codeunit_type</paramtype></parameter></method><method name="check_and_initialize" cv=""><type>static void</type><parameter name="str"><paramtype>mutable_strptr_type &amp;</paramtype></parameter></method></method-group></struct><struct name="raw_strptr"><method-group name="public static functions"><method name="equals" cv=""><type>static bool</type><parameter name="str1"><paramtype>raw_strptr_type</paramtype></parameter><parameter name="str2"><paramtype>raw_strptr_type</paramtype></parameter></method><method name="equals" cv=""><type>static bool</type><parameter name="str1"><paramtype>raw_strptr_type</paramtype></parameter><parameter name="str2"><paramtype>const string_type &amp;</paramtype></parameter></method><method name="delete_string" cv=""><type>static void</type><parameter name="str"><paramtype>raw_strptr_type</paramtype></parameter></method></method-group></struct><struct name="string"><method-group name="public static functions"><method name="equals" cv=""><type>static bool</type><parameter name="str1"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="str2"><paramtype>const string_type &amp;</paramtype></parameter></method><method name="from_raw_string" cv=""><type>static string_type</type><parameter name="str"><paramtype>const raw_string_type &amp;</paramtype></parameter></method><method name="from_iter" cv=""><type>static string_type</type><template>
          <template-type-parameter name="Iterator"/>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method></method-group></struct><typedef name="this_traits"><type><classname>string_traits</classname>&lt; StringT &gt;</type></typedef><typedef name="string_type"><type>StringT</type></typedef><typedef name="codeunit_type"><type>CharT</type></typedef><typedef name="raw_strptr_type"><type>string_type *</type></typedef><typedef name="const_raw_strptr_type"><type>const string_type *</type></typedef><typedef name="const_strptr_type"><type>boost::shared_ptr&lt; const string_type &gt;</type></typedef><typedef name="mutable_strptr_type"><type>std::auto_ptr&lt; string_type &gt;</type></typedef><typedef name="codeunit_iterator_type"><type>string_type::const_iterator</type></typedef><typedef name="raw_char_type"><type>get_raw_char_type&lt; codeunit_type &gt;::type</type></typedef><typedef name="raw_string_type"><type>std::basic_string&lt; raw_char_type &gt;</type></typedef><data-member name="codeunit_size" specifiers="static"><type>const size_t</type></data-member><data-member name="empty_string" specifiers="static"><type>const string_type</type></data-member><method-group name="public static functions"><method name="new_string" cv=""><type>static raw_strptr_type</type><parameter name="str"><paramtype>const string_type &amp;</paramtype></parameter></method><method name="new_string" cv=""><type>static raw_strptr_type</type></method><method name="clone_string" cv=""><type>static raw_strptr_type</type><parameter name="str"><paramtype>raw_strptr_type</paramtype></parameter></method></method-group></class></namespace></namespace></header><header name="boost/ustr/unicode_string_adapter.hpp"><namespace name="boost"><namespace name="ustr"><class name="unicode_string_adapter"><template>
      <template-type-parameter name="StringT"/>
      <template-type-parameter name="StringTraits"/>
      <template-type-parameter name="EncodingTraits"/>
    </template><description><para>Unicode String Adapter class</para><para>An adapter class for Unicode strings. </para></description><typedef name="string_traits"><type>StringTraits</type></typedef><typedef name="encoding_traits"><type>EncodingTraits</type></typedef><typedef name="this_type"><type><classname>unicode_string_adapter</classname>&lt; StringT, StringTraits, EncodingTraits &gt;</type></typedef><typedef name="const_adapter_type"><type><classname>unicode_string_adapter</classname>&lt; StringT, StringTraits, EncodingTraits &gt;</type></typedef><typedef name="mutable_adapter_type"><type><classname>unicode_string_adapter_builder</classname>&lt; StringT, StringTraits, EncodingTraits &gt;</type></typedef><typedef name="string_type"><type>string_traits::string_type</type></typedef><typedef name="raw_strptr_type"><type>string_traits::raw_strptr_type</type></typedef><typedef name="const_strptr_type"><type>string_traits::const_strptr_type</type></typedef><typedef name="mutable_strptr_type"><type>string_traits::mutable_strptr_type</type></typedef><typedef name="codeunit_type"><type>string_traits::codeunit_type</type></typedef><typedef name="codeunit_iterator_type"><type>string_traits::codeunit_iterator_type</type></typedef><typedef name="codepoint_iterator_type"><type>encoding_traits::codepoint_iterator_type</type></typedef><typedef name="codepoint_output_iterator_type"><type>std::back_insert_iterator&lt; <classname>mutable_adapter_type</classname> &gt;</type></typedef><typedef name="raw_char_type"><type>string_traits::raw_char_type</type></typedef><typedef name="allocator_type"><type>std::allocator&lt; codepoint_type &gt;</type></typedef><typedef name="iterator"><type>codepoint_iterator_type</type></typedef><typedef name="const_iterator"><type>const codepoint_iterator_type</type></typedef><typedef name="reverse_iterator"><type>std::reverse_iterator&lt; iterator &gt;</type></typedef><typedef name="const_reverse_iterator"><type>const reverse_iterator</type></typedef><typedef name="size_type"><type>size_t</type></typedef><typedef name="difference_type"><type>ptrdiff_t</type></typedef><typedef name="value_type"><type>codepoint_type</type></typedef><typedef name="reference"><type>codepoint_type &amp;</type></typedef><typedef name="const_reference"><type>const codepoint_type &amp;</type></typedef><typedef name="pointer"><type>codepoint_type *</type></typedef><typedef name="const_pointer"><type>const codepoint_type *</type></typedef><data-member name="codeunit_size" specifiers="static"><type>const size_t</type></data-member><method-group name="public member functions"><method name="BOOST_CONCEPT_ASSERT" cv=""><type/><parameter name=""><paramtype>(unicode_string_adapter_concepts&lt; StringT, StringTraits, EncodingTraits &gt;)</paramtype></parameter></method><method name="edit" cv="const"><type><classname>mutable_adapter_type</classname></type></method><method name="begin" cv=""><type>codepoint_iterator_type</type></method><method name="begin" cv="const"><type>const codepoint_iterator_type</type></method><method name="end" cv=""><type>codepoint_iterator_type</type></method><method name="end" cv="const"><type>const codepoint_iterator_type</type></method><method name="get_buffer" cv="const"><type>const_strptr_type</type></method><method name="rbegin" cv=""><type>reverse_iterator</type></method><method name="rend" cv=""><type>reverse_iterator</type></method><method name="to_string" cv="const"><type>const string_type &amp;</type></method><method name="operator==" cv="const"><type>bool</type><template>
          <template-type-parameter name="StringT_"/>
          <template-type-parameter name="StringTraits_"/>
          <template-type-parameter name="EncodingTraits_"/>
        </template><parameter name="other"><paramtype>const <classname>unicode_string_adapter</classname>&lt; StringT_, StringTraits_, EncodingTraits_ &gt; &amp;</paramtype></parameter></method><method name="operator+" cv="const"><type><classname>this_type</classname></type><template>
          <template-type-parameter name="StringT_"/>
          <template-type-parameter name="StringTraits_"/>
          <template-type-parameter name="EncodingTraits_"/>
        </template><parameter name="other"><paramtype>const <classname>unicode_string_adapter</classname>&lt; StringT_, StringTraits_, EncodingTraits_ &gt; &amp;</paramtype></parameter></method><method name="concat" cv="const"><type><classname>this_type</classname></type><template>
          <template-type-parameter name="StringT_"/>
          <template-type-parameter name="StringTraits_"/>
          <template-type-parameter name="EncodingTraits_"/>
        </template><parameter name="other"><paramtype>const <classname>unicode_string_adapter</classname>&lt; StringT_, StringTraits_, EncodingTraits_ &gt; &amp;</paramtype></parameter></method><method name="operator*" cv="const"><type>const string_type &amp;</type></method><method name="length" cv="const"><type>size_t</type></method><method name="codepoint_length" cv="const"><type>size_t</type></method><method name="validate" cv=""><type>void</type></method></method-group><constructor><parameter name="other"><paramtype>const <classname>this_type</classname> &amp;</paramtype></parameter></constructor><constructor><parameter name="other"><paramtype><classname>this_type</classname> &amp;&amp;</paramtype></parameter></constructor><constructor><template>
          <template-type-parameter name="StringT_"/>
          <template-type-parameter name="StringTraits_"/>
          <template-type-parameter name="EncodingTraits_"/>
        </template><parameter name="other"><paramtype>const <classname>unicode_string_adapter</classname>&lt; StringT_, StringTraits_, EncodingTraits_ &gt; &amp;</paramtype></parameter></constructor><constructor><parameter name="other"><paramtype>const string_type &amp;</paramtype></parameter></constructor><constructor><parameter name="other"><paramtype>const const_strptr_type &amp;</paramtype></parameter></constructor><constructor><parameter name="other"><paramtype>const_strptr_type &amp;&amp;</paramtype></parameter></constructor><constructor><parameter name="other"><paramtype>raw_strptr_type</paramtype></parameter></constructor><constructor><parameter name="other"><paramtype>const <classname>mutable_adapter_type</classname> &amp;</paramtype></parameter></constructor><constructor><parameter name="other"><paramtype><classname>mutable_adapter_type</classname> &amp;&amp;</paramtype></parameter></constructor><method-group name="public static functions"><method name="from_codeunits" cv=""><type>static <classname>this_type</classname></type><template>
          <template-type-parameter name="CodeunitIterator"/>
        </template><parameter name="begin"><paramtype>CodeunitIterator</paramtype></parameter><parameter name="end"><paramtype>CodeunitIterator</paramtype></parameter></method><method name="from_codepoints" cv=""><type>static <classname>this_type</classname></type><template>
          <template-type-parameter name="CodepointIterator"/>
        </template><parameter name="begin"><paramtype>CodepointIterator</paramtype></parameter><parameter name="end"><paramtype>CodepointIterator</paramtype></parameter></method></method-group></class><class name="unicode_string_adapter_builder"><template>
      <template-type-parameter name="StringT"/>
      <template-type-parameter name="StringTraits"/>
      <template-type-parameter name="EncodingTraits"/>
    </template><typedef name="string_traits"><type>StringTraits</type></typedef><typedef name="encoding_traits"><type>EncodingTraits</type></typedef><typedef name="this_type"><type><classname>unicode_string_adapter_builder</classname>&lt; StringT, StringTraits, EncodingTraits &gt;</type></typedef><typedef name="const_adapter_type"><type><classname>unicode_string_adapter</classname>&lt; StringT, StringTraits, EncodingTraits &gt;</type></typedef><typedef name="mutable_adapter_type"><type><classname>unicode_string_adapter_builder</classname>&lt; StringT, StringTraits, EncodingTraits &gt;</type></typedef><typedef name="string_type"><type>string_traits::string_type</type></typedef><typedef name="raw_strptr_type"><type>string_traits::raw_strptr_type</type></typedef><typedef name="const_strptr_type"><type>string_traits::const_strptr_type</type></typedef><typedef name="mutable_strptr_type"><type>string_traits::mutable_strptr_type</type></typedef><typedef name="codeunit_type"><type>string_traits::codeunit_type</type></typedef><typedef name="codeunit_iterator_type"><type>string_traits::codeunit_iterator_type</type></typedef><typedef name="codepoint_iterator_type"><type>encoding_traits::codepoint_iterator_type</type></typedef><typedef name="codepoint_output_iterator_type"><type>std::back_insert_iterator&lt; <classname>this_type</classname> &gt;</type></typedef><typedef name="allocator_type"><type>std::allocator&lt; codepoint_type &gt;</type></typedef><typedef name="iterator"><type>codepoint_output_iterator_type</type></typedef><typedef name="const_iterator"><type>const codepoint_output_iterator_type</type></typedef><typedef name="size_type"><type>size_t</type></typedef><typedef name="difference_type"><type>ptrdiff_t</type></typedef><typedef name="value_type"><type>codepoint_type</type></typedef><typedef name="reference"><type>codepoint_type &amp;</type></typedef><typedef name="const_reference"><type>const codepoint_type &amp;</type></typedef><typedef name="pointer"><type>codepoint_type *</type></typedef><typedef name="const_pointer"><type>const codepoint_type *</type></typedef><data-member name="codeunit_size" specifiers="static"><type>const size_t</type></data-member><method-group name="public member functions"><method name="BOOST_CONCEPT_ASSERT" cv=""><type/><parameter name=""><paramtype>(unicode_string_adapter_concepts&lt; StringT, StringTraits, EncodingTraits &gt;)</paramtype></parameter></method><method name="clone_buffer" cv=""><type>raw_strptr_type</type></method><method name="release" cv=""><type>raw_strptr_type</type></method><method name="freeze" cv=""><type><classname>const_adapter_type</classname></type></method><method name="freeze_copy" cv=""><type><classname>const_adapter_type</classname></type></method><method name="begin" cv=""><type>codepoint_output_iterator_type</type></method><method name="append" cv=""><type>void</type><parameter name="codepoint"><paramtype>const codepoint_type &amp;</paramtype></parameter></method><method name="append_codepoint" cv=""><type>void</type><parameter name="codepoint"><paramtype>const codepoint_type &amp;</paramtype></parameter></method><method name="push_back" cv=""><type>void</type><parameter name="codepoint"><paramtype>const codepoint_type &amp;</paramtype></parameter></method><method name="append_codeunit" cv=""><type>void</type><template>
          <template-type-parameter name="CodeUnit"/>
        </template><parameter name="codeunit"><paramtype>const CodeUnit &amp;</paramtype></parameter></method><method name="append" cv=""><type>void</type><template>
          <template-type-parameter name="StringT_"/>
          <template-type-parameter name="StringTraits_"/>
          <template-type-parameter name="EncodingTraits_"/>
        </template><parameter name="str"><paramtype>const <classname>unicode_string_adapter</classname>&lt; StringT_, StringTraits_, EncodingTraits_ &gt; &amp;</paramtype></parameter></method></method-group><constructor/><constructor><parameter name="other"><paramtype><classname>this_type</classname> &amp;&amp;</paramtype></parameter></constructor><method-group name="private member functions"><method name="operator==" cv="const"><type>bool</type><parameter name=""><paramtype>const <classname>this_type</classname> &amp;</paramtype></parameter></method></method-group><constructor><parameter name=""><paramtype>const <classname>this_type</classname> &amp;</paramtype></parameter></constructor><copy-assignment><parameter name=""><paramtype>const <classname>this_type</classname> &amp;</paramtype></parameter></copy-assignment></class><typedef name="u8_string"><type><classname>unicode_string_adapter</classname>&lt; std::string &gt;</type></typedef><typedef name="u16_string"><type><classname>unicode_string_adapter</classname>&lt; std::basic_string&lt; utf16_codeunit_type &gt; &gt;</type></typedef><typedef name="u32_string"><type><classname>unicode_string_adapter</classname>&lt; std::basic_string&lt; codepoint_type &gt; &gt;</type></typedef><function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-type-parameter name="StringT"/>
          <template-type-parameter name="StringTraits"/>
          <template-type-parameter name="EncodingTraits"/>
        </template><parameter name="out"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="str"><paramtype>const <classname>unicode_string_adapter</classname>&lt; StringT, StringTraits, EncodingTraits &gt; &amp;</paramtype></parameter></function></namespace></namespace><macro name="USTR" kind="functionlike"><macro-parameter name="str"/></macro></header></library-reference>
